model = "lasso",
OTU_OTU_pvalue = 0.001,
OTU_OTU_rvalue = 0.6,
OTU_Phenotype_pvalue = 0.6,
definePhenotype = "Marketable",
defineTreatment = "Maxifort",
coloredby = "Phylum",
PhenoNodecolor = "yellow",
PhenoNodesize = 20,
PhenoNodelabel = "Yield",
nodesize = 10,
Pheno2OTUedgecolor = "black",
netlayout = layout.fruchterman.reingold
)
document()
PhONA(
physeqobj = phyobj,
cordata = sparcc.cor,
pdata = sparcc.pval,
model = "lasso",
OTU_OTU_pvalue = 0.001,
OTU_OTU_rvalue = 0.6,
OTU_Phenotype_pvalue = 0.6,
definePhenotype = "Marketable",
defineTreatment = "Maxifort",
coloredby = "Phylum",
PhenoNodecolor = "yellow",
PhenoNodesize = 20,
PhenoNodelabel = "Yield",
nodesize = 10,
Pheno2OTUedgecolor = "black",
netlayout = layout.fruchterman.reingold
)
document()
PhONA(
physeqobj = phyobj,
cordata = sparcc.cor,
pdata = sparcc.pval,
model = "lasso",
OTU_OTU_pvalue = 0.001,
OTU_OTU_rvalue = 0.6,
OTU_Phenotype_pvalue = 0.6,
definePhenotype = "Marketable",
defineTreatment = "Maxifort",
coloredby = "Phylum",
PhenoNodecolor = "yellow",
PhenoNodesize = 20,
PhenoNodelabel = "Yield",
nodesize = 10,
Pheno2OTUedgecolor = "black",
netlayout = layout.fruchterman.reingold
)
coff_df
document()
PhONA(
physeqobj = phyobj,
cordata = sparcc.cor,
pdata = sparcc.pval,
model = "lasso",
OTU_OTU_pvalue = 0.001,
OTU_OTU_rvalue = 0.6,
OTU_Phenotype_pvalue = 0.6,
definePhenotype = "Marketable",
defineTreatment = "Maxifort",
coloredby = "Phylum",
PhenoNodecolor = "yellow",
PhenoNodesize = 20,
PhenoNodelabel = "Yield",
nodesize = 10,
Pheno2OTUedgecolor = "black",
netlayout = layout.fruchterman.reingold
)
library(PhONA)
library(devtools)
document()
library(PhONA)
phyobj <- readRDS(system.file("extdata", "physeqobject.rds", package = "PhONA"))
sparcc.cor <- read.delim(system.file("extdata", "cor_sparcc.out", package = "PhONA"), sep = "\t", header = T, row.names = 1)
sparcc.pval <- read.delim(system.file("extdata", "pvals.txt", package = "PhONA"), sep = "\t", header = T, row.names = 1)
physeqobj = phyobj
###
odata = t(otu_table(physeqobj))
mdata = sample_data(physeqobj)
# tdata = taxdata
tdata = data.frame(tax_table(physeqobj)) # is too slow
possible_tax <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
if (coloredby %in% possible_tax) {
# create a color palltet using coloredby
# number of unique color needed
mod.vec <- tdata %>%
pull(coloredby) %>%
as.character()
n <- length(unique(mod.vec))
mod.num <- as.numeric(as.factor(mod.vec))
ucolors <- distinctColorPalette(n)
tdata["color"] <- sapply(mod.num, function(j) ucolors[j])
} else {
cat(" Provided coloredby: ", coloredby,"\n")
stop("Please provide correct coloredby paramter. Available options are: Kingdom,
Phylum, Class, Order, Family, Genus, Species")
}
coloredby="Phylum"
possible_tax <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
if (coloredby %in% possible_tax) {
# create a color palltet using coloredby
# number of unique color needed
mod.vec <- tdata %>%
pull(coloredby) %>%
as.character()
n <- length(unique(mod.vec))
mod.num <- as.numeric(as.factor(mod.vec))
ucolors <- distinctColorPalette(n)
tdata["color"] <- sapply(mod.num, function(j) ucolors[j])
} else {
cat(" Provided coloredby: ", coloredby,"\n")
stop("Please provide correct coloredby paramter. Available options are: Kingdom,
Phylum, Class, Order, Family, Genus, Species")
}
p.yes <- pdata < OTU_OTU_pvalue
p.yes.r <- cordata * p.yes
pdata = sparcc.pval
cordata = sparcc.cor
possible_tax <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
if (coloredby %in% possible_tax) {
# create a color palltet using coloredby
# number of unique color needed
mod.vec <- tdata %>%
pull(coloredby) %>%
as.character()
n <- length(unique(mod.vec))
mod.num <- as.numeric(as.factor(mod.vec))
ucolors <- distinctColorPalette(n)
tdata["color"] <- sapply(mod.num, function(j) ucolors[j])
} else {
cat(" Provided coloredby: ", coloredby,"\n")
stop("Please provide correct coloredby paramter. Available options are: Kingdom,
Phylum, Class, Order, Family, Genus, Species")
}
p.yes <- pdata < OTU_OTU_pvalue
p.yes.r <- cordata * p.yes
OTU_OTU_pvalue = 0.001
OTU_OTU_rvalue = 0.6
OTU_Phenotype_pvalue = 0.6
definePhenotype="Marketable"
defineTreatment="Maxifort"
coloredby="Phylum
PhenoNodecolor="yellow
PhenoNodesize=20
PhenoNodelabel="Yield"
nodesize=10
Pheno2OTUedgecolor = "black"
###
odata = t(otu_table(physeqobj))
mdata = sample_data(physeqobj)
# tdata = taxdata
tdata = data.frame(tax_table(physeqobj)) # is too slow
if (coloredby %in% possible_tax) {
# create a color palltet using coloredby
# number of unique color needed
mod.vec <- tdata %>%
pull(coloredby) %>%
as.character()
n <- length(unique(mod.vec))
mod.num <- as.numeric(as.factor(mod.vec))
ucolors <- distinctColorPalette(n)
tdata["color"] <- sapply(mod.num, function(j) ucolors[j])
} else {
cat(" Provided coloredby: ", coloredby,"\n")
stop("Please provide correct coloredby paramter. Available options are: Kingdom,
Phylum, Class, Order, Family, Genus, Species")
}
p.yes <- pdata < OTU_OTU_pvalue
p.yes.r <- cordata * p.yes
p.yes.r <- abs(p.yes.r) > OTU_OTU_rvalue
p.yes.rr <- p.yes.r * sparcc.cor
adjm <- as.matrix(p.yes.rr)
adjm <- as.matrix(adjm)
## Select only the taxa for the filtered OTUs by using rownames of otu.pval
sel.tax <- tdata[rownames(adjm), , drop = FALSE]
all.equal(rownames(sel.tax), rownames(adjm))
net.grph = graph.adjacency(adjm, mode = "undirected", weighted = TRUE, diag = FALSE)
edgew <- E(net.grph)$weight
##
V(net.grph)$Kingdom <- as.character(sel.tax$Kingdom)
V(net.grph)$Phylum <- as.character(sel.tax$Phylum)
V(net.grph)$Class <- as.character(sel.tax$Class)
V(net.grph)$Order <- as.character(sel.tax$Order)
V(net.grph)$Family <- as.character(sel.tax$Family)
V(net.grph)$Genus <- as.character(sel.tax$Genus)
V(net.grph)$Species <- as.character(sel.tax$Species)
V(net.grph)$color <- tdata$color
x = mdata %>% pull(definePhenotype)  ## generalize to metadata
x
odata
model.lasso <- function(x, odata) {
odata_with_pheno <- as.data.frame(odata)
odata_with_pheno["Phenotype"] <- x
myGrid <- expand.grid(
alpha = 1, ## lasso
lambda = seq(0.0001, 1, length = 100)
)
trControl = trainControl(
method = "cv",
number = 10,
verboseIter = TRUE)
model <- train(Phenotype ~., data = odata_with_pheno, method = "glmnet",
tuneGrid = myGrid, trControl = trControl)
aa = data.frame(varImp(model,scale=F)$importance)
aa["otu"] <- rownames(aa)
bb = aa[aa$Overall > 0, ]
cdata = odata_with_pheno[, !colnames(odata_with_pheno) %in% "Phenotype"]
sel_cdata = cdata[, colnames(cdata) %in% bb$otu]
sel_cdata["Phenotype"] <- odata_with_pheno$Phenotype
sub_model <- glm(Phenotype ~ ., data = sel_cdata)
summary.lm(sub_model)
confint(sub_model)
coff_df = data.frame(summary(sub_model)$coefficient)[-c(1), ] # also remove row with intercept
#coff_df_sig = coff_df[coff_df$Pr...t.. <=0.05, ]
#coff_df[trt] <- trt
coff_df["otus"] <- rownames(coff_df)
if (dim(coff_df)[1] > 0){
coff_df
} else {
data.frame()
}
}
model.lasso(x,odata)
defineTreatment
bb = model.lasso(x, odata)
bb
type(bb)
class(bb)
bb["Treatment"] <- defineTreatment
bb
from <- rep(defineTreatment,dim(bb)[1])  ### how to get sel.rootstock
df <-data.frame(FROM = from, TO=bb$otu, relation=bb$relation, pv =bb$pvalue)
#' Run Lasso Models
#'
#' This function takes in phyloseq object, association matix, p value matrix
#' and create a combined OTU-OTU and OTU-Phenotype network. User can select model to
#' define OTU-Phontype assocaition.
#' @param x A phyloseq object which combined OTU count, taxonomy and metadata
#' @return A matrix of the infile
#' @export
model.lasso <- function(x, odata) {
odata_with_pheno <- as.data.frame(odata)
odata_with_pheno["Phenotype"] <- x
myGrid <- expand.grid(
alpha = 1, ## lasso
lambda = seq(0.0001, 1, length = 100)
)
trControl = trainControl(
method = "cv",
number = 10,
verboseIter = TRUE)
model <- train(Phenotype ~., data = odata_with_pheno, method = "glmnet",
tuneGrid = myGrid, trControl = trControl)
aa = data.frame(varImp(model,scale=F)$importance)
aa["otu"] <- rownames(aa)
bb = aa[aa$Overall > 0, ]
cdata = odata_with_pheno[, !colnames(odata_with_pheno) %in% "Phenotype"]
sel_cdata = cdata[, colnames(cdata) %in% bb$otu]
sel_cdata["Phenotype"] <- odata_with_pheno$Phenotype
sub_model <- glm(Phenotype ~ ., data = sel_cdata)
summary.lm(sub_model)
confint(sub_model)
coff_df = data.frame(summary(sub_model)$coefficient)[-c(1), ] # also remove row with intercept
#coff_df_sig = coff_df[coff_df$Pr...t.. <=0.05, ]
#coff_df[trt] <- trt
coff_df["otus"] <- rownames(coff_df)
coff_df["relation"] <- coff_df$Estimate
if (dim(coff_df)[1] > 0){
coff_df
} else {
data.frame()
}
}
bb = model.lasso(x, odata)
bb = model.lasso(x, odata)
bb
bb["Treatment"] <- defineTreatment
from <- rep(defineTreatment,dim(bb)[1])  ### how to get sel.rootstock
df <-data.frame(FROM = from, TO=bb$otu, relation=bb$relation, pv =bb$pvalue)
#' Run Lasso Models
#'
#' This function takes in phyloseq object, association matix, p value matrix
#' and create a combined OTU-OTU and OTU-Phenotype network. User can select model to
#' define OTU-Phontype assocaition.
#' @param x A phyloseq object which combined OTU count, taxonomy and metadata
#' @return A matrix of the infile
#' @export
model.lasso <- function(x, odata) {
odata_with_pheno <- as.data.frame(odata)
odata_with_pheno["Phenotype"] <- x
myGrid <- expand.grid(
alpha = 1, ## lasso
lambda = seq(0.0001, 1, length = 100)
)
trControl = trainControl(
method = "cv",
number = 10,
verboseIter = TRUE)
model <- train(Phenotype ~., data = odata_with_pheno, method = "glmnet",
tuneGrid = myGrid, trControl = trControl)
aa = data.frame(varImp(model,scale=F)$importance)
aa["otu"] <- rownames(aa)
bb = aa[aa$Overall > 0, ]
cdata = odata_with_pheno[, !colnames(odata_with_pheno) %in% "Phenotype"]
sel_cdata = cdata[, colnames(cdata) %in% bb$otu]
sel_cdata["Phenotype"] <- odata_with_pheno$Phenotype
sub_model <- glm(Phenotype ~ ., data = sel_cdata)
summary.lm(sub_model)
confint(sub_model)
coff_df = data.frame(summary(sub_model)$coefficient)[-c(1), ] # also remove row with intercept
#coff_df_sig = coff_df[coff_df$Pr...t.. <=0.05, ]
#coff_df[trt] <- trt
coff_df["otus"] <- rownames(coff_df)
coff_df["relation"] <- coff_df$Estimate
coff_df["pvalue"] <- coff_df$Pr...t..
if (dim(coff_df)[1] > 0){
coff_df
} else {
data.frame()
}
}
#source("R/model.linear.R")
bb = model.lasso(x, odata)
bb
from <- rep(defineTreatment,dim(bb)[1])  ### how to get sel.rootstock
df <-data.frame(FROM = from, TO=bb$otu, relation=bb$relation, pv =bb$pvalue)
df.g <- graph.data.frame(d = df, directed = FALSE)
E(df.g)$weight <- bb$relation
#plot(df.g)
E(df.g)$color = Pheno2OTUedgecolor
E(df.g)$lty <- ifelse(E(df.g)$weight < 0, 2 ,1) # if negative dotted
###
net.grph
E(net.grph)$color = ifelse(E(net.grph)$weight < 0,"red","blue") # if negative red
E(net.grph)$lty <- 1
net.two <- graph.union(df.g, net.grph)
# Edge color
color.g1 <- E(net.two)$color_1 %>% .[!is.na(.)]
color.g2 <- E(net.two)$color_2 %>% .[!is.na(.)]
combined_color <- c(color.g2,color.g1)
E(net.two)$color <- combined_color
# Edge link type
linktype.g1 <- E(net.two)$lty_1 %>% .[!is.na(.)]
linktype.g2 <- E(net.two)$lty_2 %>% .[!is.na(.)]
combined_linktype <- c(linktype.g2,linktype.g1)
E(net.two)$lty<- combined_linktype
bad.vs3 <- V(net.two)[degree(net.two) == 0 | degree(net.two) == 1 ]
# # remove isolated nodes
net.two <- delete.vertices(net.two, bad.vs3)
V(net.two)$color[1] <- PhenoNodecolor
V(net.two)$size <- rep(nodesize,vcount(net.two))
V(net.two)$size[1] <- PhenoNodesize
V(net.two)$nName <- V(net.two)$Genus ## can be passed as option
V(net.two)$nName[1] <- defineTreatment
V(net.two)$vertex.label.size = rep(0.5,vcount(net.two))
V(net.two)$vertex.label.size[1] <- 1
V(net.two)$vertex.label_type = rep(1,vcount(net.two))
V(net.two)$vertex.label_type[1] <- 2
V(net.two)$nName[1] <- PhenoNodelabel
par(mar = c(0, 0, 0, 0))
plot(net.two,
vertex.frame.color="black",
edge.curved=F,
layout=netlayout,
vertex.label=V(net.two)$nName,
vertex.label.color="black",
#vertex.label.family="Times New Roman",
vertex.label.font=V(net.two)$vertex.label_type,
vertex.label.cex=V(net.two)$vertex.label.size)
# legend_nodes <- unique(V(net.two)$Phylum)
legend_nodes <- unique(get.vertex.attribute(net.two)[coloredby][[1]])
legend_nodes[1] <-  PhenoNodelabel
legend(x=1.1, y=1.1,legend_nodes, pch=21, pt.bg=unique( V(net.two)$color), pt.cex=2, cex=0.8, bty="n", ncol=1)
net.two
document()
load_all()
load_all()
phyobj <- readRDS(system.file("extdata", "physeqobject.rds", package = "PhONA"))
sparcc.cor <- read.delim(system.file("extdata", "cor_sparcc.out", package = "PhONA"), sep = "\t", header = T, row.names = 1)
sparcc.pval <- read.delim(system.file("extdata", "pvals.txt", package = "PhONA"), sep = "\t", header = T, row.names = 1)
devtools::use_testthat()
devtools::use_testthat()
evtools::load_all().
evtools::load_all()
load_all()
use_test()
library(testthat)
library(PhONA)
test_check("PhONA")
test_that("Test sqrt_newton: positive numeric",{
expected <- 2
actual <- sqrt_newton(4, 1)
expect_equal(expected, actual)
})
load_all()
document()
a = (10,20, 30, 40 , 50)
a = c(10,20, 30, 40 , 50)
mean(a)
document()
load_all()
library(PhONA)
test_check("PhONA")
test_that("Test sqrt_newton: positive numeric",{
expected <- 30
actual <- getMean(10,20, 30, 40 , 50)
expect_equal(expected, actual)
})
getMean(a)
a
physeqobj = phyobj
cordata = sparcc.cor
pdata = sparcc.pval
model = c("lm","lasso")
OTU_OTU_pvalue = 0.001
OTU_OTU_rvalue = 0.6
OTU_Phenotype_pvalue = 0.6
definePhenotype="Marketable"
defineTreatment="Maxifort"
coloredby="Phylum"
PhenoNodecolor="yellow"
PhenoNodesize=20
PhenoNodelabel="Yield"
nodesize=10
Pheno2OTUedgecolor = "black"
netlayout=layout.fruchterman.reingold
PhONA()
PhONA(physeqobj)
PhONA(physeqobj, model="lasso")
PhONA(physeqobj, model="lasso")
phyobj <- readRDS(system.file("extdata", "physeqobject.rds", package = "PhONA"))
library(devtools)
document()
document()
document()
help(PhONA)
help(PhONA)
document()
help(PhONA)
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
document()
help(PhONA)
help(model.lasso)
document()
help(PhONA)
library(rmarkdown)
md_document(
variant = "markdown_strict",
preserve_yaml = FALSE,
toc = FALSE,
toc_depth = 3,
fig_width = 7,
fig_height = 5,
fig_retina = NULL,
dev = "png",
df_print = "default",
includes = NULL,
md_extensions = NULL,
pandoc_args = NULL,
ext = ".md"
)
if (FALSE) {
library(rmarkdown)
render("vignettes//PhONA.Rmd", md_document())
render("vignettes//PhONA.Rmd", md_document(variant = "markdown_github"))
}
render("input.Rmd", md_document())
render("vignettes//PhONA.Rmd", md_document())
library(devtools)
document()
help(PhONA)
vignette("PhONA")
devtools::use_vignette("PhONA")
browseVignettes("PhONA")
browseVignettes()
browseVignettes
document()
browseVignettes("PhONA")
load_all()
browseVignettes("PhONA")
devtools::build()
devtools::build()
browseVignettes("PhONA")
vignette("PhONA")
help(PhONA)
library(devtools)
build()
